(defcfg
  process-unmapped-keys yes
danger-enable-cmd yes
  log-layer-changes no

  linux-dev ("/dev/input/by-id/usb-Corsair_CORSAIR_K65_RGB_MINI_60__Mechanical_Gaming_Keyboard_F5001901605DE321AA3518670D028020-event-kbd" "/dev/input/by-path/platform-i8042-serio-0-event-kbd")
  linux-continue-if-no-devs-found yes
)

(defvar
    ;; This is a do nothing, but still act like a key. This should not be used in
    ;; sequences or anything
    nop-reserved nop8

    ;; This should literally pretty much never show up, this is a full stop
    nop-stop nop9 
)


(defsrc
	esc  1  2  3  4  5  6  7  8  9  0  -  =  bspc
	tab  q  w  e  r  t  y  u  i  o  p  [  ]  \
	caps a  s  d  f  g  h  j  k  l  ;  '  ret
	lsft z  x  c  v  b  n  m  ,  .  /  rsft
	lctl met lalt   spc  ralt   menu rctrl
)

;; blank layout
;; 14
;; 14
;; 13
;; 12
#|
(
	_    _  _  _  _  _  _  _  _  _  _  _  _  _
	_    _  _  _  _  _  _  _  _  _  _  _  _  _
	_    _  _  _  _  _  _  _  _  _  _  _  _
	_    _  _  _  _  _  _  _  _  _  _  _
	_    _   _      _    _      _    _
)
|#

(defalias
    ;; -----
    ;; Simple layer toggles
    ;; -----
	lay (layer-toggle layers) ;; perma layer switching
    etd (layer-toggle extend) ;; extra functionality
	qwt (layer-switch qwerty) ;; main layer
	gmg (layer-switch gaming) ;; main layer minus fanciness
	hands (layer-switch handsdown) ;; handsdown

	ead (tap-hold-press 1 1000 esc @etd) ;; main extend layer toggle (caps lock)
	aly (tap-hold-release 100 100 (one-shot-press 1000 ralt) @lay) ;; helper for alt + fN
)

(defvirtualkeys
  stopseq $nop-stop
)

(defalias
    ;; quick actions
	cpy C-c
	pst C-v
	quit A-f4
	mnimz M-m
)

;; Main layer with the added features:
;; - extend layer -=- gives really nice shortcuts
;; - niri keybinds
(deflayer qwerty
	grv  1  2  3  4  5  6  7  8  9  0  -  =  bspc
	tab  q  w  e  r  t  y  u  i  o  p  [  ]  \
	@ead  a  s d f g  h  j  k l  ;  '  ret
	lsft (chord niri-act z) (chord niri-act x)  c  v  b  n  m  ,  .  /  rsft
	lctl met lalt   spc  ralt   menu rctrl
)

(defchords niri-act $combo-timeout
  (z) z
  (x) x
  (z x) (layer-while-held niri)
)

;; No weird timings or anything, all it has is the caps-lock extend layer
(deflayer gaming
	grv  1  2  3  4  5  6  7  8  9  0  -  =  bspc
	tab  q  w  e  r  t  y  u  i  o  p  [  ]  \
	@ead  a  s  d  f  g  h  j  k  l  ;  '  ret
	lsft z  x  c  v  b  n  m  ,  .  /  rsft
	lctl met lalt   spc  ralt   menu rctrl
)

(deflayer extend
	esc    f1  f2  f3  f4  f5  f6  f7  f8  f9  f10  f11 f12 _
	_    @ch1 @ch2 @ch3  _  _  _  @md1  @md2 @md3  _  _  _  _
	_    @ch4 @ch5 @ch6  (layer-while-held niri)  _  lft  down  up  rght  _  _  _
	_    (chord niri-act z) (chord niri-act x) @cpy @pst  _ _  _ _ _  _  _
	_    _   @aly      _    _      _    (on-press press-virtualkey dummy-switch)
)

(deflayer layers
	lrld    @qwt  @gmg  @hands  _  _  _  _  _  _  _  _  _  _
	_    _  _  _  _  _  _  _  _  _  _  _  _  _
	_    _  _  _  _  _  _ _  _  _  _  _ _
	_    _  _  _  _  _  _  _  _  _  _  _
	_    _   _      _    _      _    _
)

(deflayer ext
	_    XX  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX
	_    XX  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX
	_    x  XX  XX  XX  XX  left down up  rght  XX  XX XX
	_    XX  XX  XX  XX  XX  XX  XX  XX  XX  XX  _
	_    _   _      _    _      _    _
)


;; This is a layer that essentially has XX's everywhere (but nop8's are more fun)
;; The whole point of this is to be able to record a dynamic macro and not have
;; the macro creation process produce any output. This will eat it all up, and
;; can then be perfectly replayed on qwerty or something. This will not block
;; the extend layer as a safety precaution

(defalias
    d nop8
)

(defvirtualkeys
    dummy-switch (layer-while-held dummy)
    dummy-switch-stop (on-press release-virtualkey dummy-switch)
)

(defseq
    dummy-switch-stop (nop2 nop3 nop4 nop2 nop4)
)

(deflayer dummy
	@d   @d  @d  @d  @d  @d  @d  @d  @d  @d  @d  @d  @d  @d
	@d   @d  @d  @d  @d  @d  @d  @d  @d  @d  @d  @d  @d  @d
	@d   @d  @d  @d  @d  @d  @d  @d  @d  @d  @d  @d  nop4
	@d   @d  @d  @d  @d  @d  @d  @d  @d  @d  @d  nop3
	(sequence 3000 hidden-suppressed)   @d   @d      @d    @d      @d nop2
)

;; really nice media controls right on the right hand
(defchords media 300
  ;; (1 2 3)
  ;; (1   3) 
  (1 2  ) prev
  (  2 3) next
  (  2  ) pp 
  (    3) volu
  (1    ) voldwn
  (1 2 3) mute
)

;; 1 2 3
;; 4 5 6
(defchords win 100
  ;; (  2 3       ) M-C-rght
  ;; (1 2         ) M-C-lft
  (1 2 3       ) A-f4
  (1   3       ) M-m
  (    3       ) M-C-l
  (  2 3       ) M-C-k
  (1           ) M-g
  (  2         ) M-C-up
  ;; (    3       ) M-C-s
  (       4    ) M-C-lft
  (         5  ) M-C-down
  (           6) M-C-rght
  (       4 5 6) M-f
)

(defalias
  ch1 (chord win 1)
  ch2 (chord win 2)
  ch3 (chord win 3)
  ch4 (chord win 4)
  ch5 (chord win 5)
  ch6 (chord win 6)
  md1 (chord media 1)
  md2 (chord media 2)
  md3 (chord media 3)
  windows C-A-S-k
  launcher C-A-S-j
)

;; -----
;; NIRI SECTION
;; -----

;; main niri aliases
(defalias
    dw (layer-while-held niri-dw)

    ni-lft (t! meta1-fork (cmd-log none error niri msg action focus-monitor-left) (cmd-log none error niri msg action focus-column-left))
    ni-rght (t! meta1-fork (cmd-log none error niri msg action focus-monitor-right) (cmd-log none error niri msg action focus-column-right))
    ni-up (t! meta1-fork (cmd-log none error niri msg action focus-workspace-up) (cmd-log none error niri msg action focus-window-or-workspace-up))
    ni-down (t! meta1-fork (cmd-log none error niri msg action focus-workspace-down) (cmd-log none error niri msg action focus-window-or-workspace-down))

    ni-meta (multi
        (on-press press-virtualkey ni-meta1)
        (on-release release-virtualkey ni-meta1)
    )
)

(deftemplate meta1-fork (action1 action2)
    (switch
        ((input virtual ni-meta1)) $action1 break
        () $action2 break
    )
)

(defvirtualkeys
    ni-meta1 $nop-reserved
)

;; Workspace and display management

(deftemplate ws-move (o1 w1 o2 w2) 
    (switch 
        ((input virtual ni-meta1)) (cmd-log none error swu move-container $o1 $w1) break
        () (cmd-log none error swu move-container $o2 $w2) break
    )
)

(deftemplate ws-swap (o1 w1 o2 w2) 
    (switch 
        ((input virtual ni-meta1)) (cmd-log none error swu swap $o1 $w1) break
        () (cmd-log none error swu swap $o2 $w2) break
    )
)

(defchords workspace 100
    ;; 1 2 3 4
    (    1 2    ) nop1
    (        3 4) nop1
)

(defchords workspace-move 100
    ;; 1 2 3 4
    (    1      ) (t! ws-move 1 11 0 01)
    (      2    ) (t! ws-move 1 12 0 02)
    (    1 2    ) (t! ws-move 1 13 0 03)
    (        3  ) (t! ws-move 1 14 0 04)
    (    1   3  ) (t! ws-move 1 15 0 05)
    (      2 3  ) (t! ws-move 1 16 0 06)
    (    1 2 3  ) (t! ws-move 1 17 0 07)
    (          4) (t! ws-move 1 18 0 08)
    (    1     4) (t! ws-move 1 19 0 09)
    (      2   4) (t! ws-move 1 1A 0 0A)
    (    1 2   4) (t! ws-move 1 1B 0 0B)
    (        3 4) (t! ws-move 1 1C 0 0C)
    (    1   3 4) (t! ws-move 1 1D 0 0D)
    (      2 3 4) (t! ws-move 1 1E 0 0E)
    (    1 2 3 4) (t! ws-move 1 1F 0 0F)
)

(defchords workspace-change 100
    ;; 1 2 3 4
    (    1      ) (cmd-log none error niri msg action move-workspace-to-monitor-left)
    (      2    ) (cmd-log none error niri msg action move-workspace-down)
    (        3  ) (cmd-log none error niri msg action move-workspace-up)
    (          4) (cmd-log none error niri msg action move-workspace-to-monitor-right)
    (    1 2    ) (cmd-log none error niri msg action move-column-to-monitor-left)
    (        3 4) (cmd-log none error niri msg action move-column-to-monitor-right)
)

(defchords niri-quick 100
    ;; 0 1 2 3 4
    (0        ) (cmd-log none error niri msg action spawn -- tofi_app)
    (      3  ) (cmd-log none error niri msg action focus-workspace-previous)
    (  1 2    ) (cmd-log none error niri msg action close-window)
    (  1   3  ) (t! meta1-fork (cmd-log info error niri msg action spawn -- nu -c "swaylock; keepassxc --lock") (cmd-log none error niri msg action spawn -- wlogout))
    (    2    ) (switch
      ((input virtual ni-meta1)) (cmd-log none error niri msg action toggle-column-tabbed-display) break
      () (cmd-log none error niri msg action maximize-column) break
    )
    (    2 3  ) (cmd-log none error niri msg action toggle-overview)
    (        4) (cmd-log none error niri msg action center-window)
    (      3 4) (cmd-log none error swaymsg layout tabbed)
    (    2 3 4) (cmd-log none error swaymsg layout stacking)
    (    2   4) (cmd-log none error niri msg action window-fullscreen)
    (0   2    ) (t! meta1-fork (cmd-log none error swaymsg floating toggle) (cmd-log none error swaymsg focus mode_toggle))
    (  1      ) (switch
      ((input virtual ni-meta1)) (cmd-log none error niri msg action switch-preset-window-height) break
      () (cmd-log none error niri msg action switch-preset-column-width) break
    )
)

(defalias
    w1 (chord workspace 1)
    w2 (chord workspace 2)
    w3 (chord workspace 3)
    w4 (chord workspace 4)

    ws1 (chord workspace-change 1)
    ws2 (chord workspace-change 2)
    ws3 (chord workspace-change 3)
    ws4 (chord workspace-change 4)

    qs0 (chord niri-quick 0)
    qs1 (chord niri-quick 1)
    qs2 (chord niri-quick 2)
    qs3 (chord niri-quick 3)
    qs4 (chord niri-quick 4)

    wm1 (chord workspace-move 1)
    wm2 (chord workspace-move 2)
    wm3 (chord workspace-move 3)
    wm4 (chord workspace-move 4)

    term (t! meta1-fork (cmd-log none error niri msg action spawn -- kitty -o confirm_os_window_close=0 -- zellij attach -c scratch) (cmd-log none error niri msg action spawn -- kitty))
)

;; This is main sway layer. Manual work needs to be done to add keys to activation phase
(deflayer niri
	_    XX  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX
	_    XX  @dw  XX  XX  XX  XX  @w1  @w2  @w3  @w4  XX  XX  XX
	_    XX  XX XX @dw XX @ni-lft @ni-down @ni-up @ni-rght @ni-meta XX @term
	@ni-meta     XX  XX  (layer-while-held niri-c)  (layer-while-held niri-mouse)  XX  @qs0  @qs1  @qs2  @qs3 @qs4  XX
	_    _   _      _    _      _    _
)

(deflayer handsdown-niri
	_    XX  @dw  XX  XX  XX  XX  @w1  @w2  @w3  @w4  XX  XX  XX
	_    XX  XX XX @dw XX @ni-lft @ni-down @ni-up @ni-rght @ni-meta  XX @term XX
	@ni-meta     XX  XX  (layer-while-held handsdown-niri-c)  (layer-while-held handsdown-niri-mouse)  XX  @qs0  @qs1  @qs2  @qs3 @qs4  XX XX
	_    XX  XX  XX  XX  XX  XX  XX  XX  XX  XX  XX 
	_    _   _      _    _      _    _
)



(deflayer niri-c
	_    _  _  _  _  _  _  _  _  _  _  _  _  _
	_    _  _  _  _  _  @ws1  @ws2  @ws3  @ws4 _ _  _  _
	_    _  _  _  _  _  @move-left @move-down @move-up @move-right _  _  _
	_    _  _  _  _  _  _  _  _  _  _  _
	_    _   _      _    _      _    _
)

(deflayer handsdown-niri-c
	_    _  _  _  _  _   @ws1  @ws2  @ws3  @ws4  _ _  _  _
	_    _  _  _  _  _  @move-left @move-down @move-up @move-right _  _  _ _
	_    _  _  _  _  _  _  _  _  _  _  _ _
	_    _  _  _  _  _  _  _  _  _  _  _
	_    _   _      _    _      _    _
)

(defvar
    nsize 10
    bsize 30
)

(deftemplate resize (type direction normal big)
    (switch
        ((input virtual ni-meta1)) (cmd-log none error swaymsg resize $type $direction $big px) break
        () (cmd-log none error swaymsg resize $type $direction $normal px) break
    )
)

(deflayer niri-dw
	_    _  _  _  _  _  _  _  _  _  _  _  _  _
	_    _  _  _  _  _  _  @wm1  @wm2  @wm3  @wm4  _  _  _
	_    _  _  _  _  _  @resize-left @resize-down @resize-up @resize-right  _  _  _
	_    _  _  _  _  _  _  _  _  _  _  _
	_    _   _      _    _      _    _
)

(deflayer handsdown-niri-dw
	_    _  _  _  _  _  _  @wm1  @wm2  @wm3  @wm4  _  _  _
	_    _  _  _  _  _  (t! resize shrink width $nsize $bsize) (t! resize shrink height $nsize $bsize) (t! resize grow height $nsize $bsize) (t! resize grow width $nsize $bsize)  _  _  _ _
	_    _  _  _  _  _  _  _  _  _  _  _ _
	_    _  _  _  _  _  _  _  _  _  _  _
	_    _   _      _    _      _    _
)

(defalias
    move-left (switch 
        ((input virtual ni-meta1)) (cmd-log none error niri msg action consume-or-expel-window-left) break
        () (cmd-log none error niri msg action move-column-left) break
    )
    move-right (switch 
        ((input virtual ni-meta1)) (cmd-log none error niri msg action consume-or-expel-window-right) break
        () (cmd-log none error niri msg action move-column-right) break
    )
    move-up (switch 
        ((input virtual ni-meta1)) (cmd-log none error niri msg action move-column-to-workspace-up) break
        () (cmd-log none error niri msg action move-window-up) break
    )
    move-down (switch 
        ((input virtual ni-meta1)) (cmd-log none error niri msg action move-column-to-workspace-down) break
        () (cmd-log none error niri msg action move-window-down) break
    )

    resize-left (switch
        ((input virtual ni-meta1)) (cmd-log none error niri msg action swap-window-left) break
        () (cmd-log none error niri msg action set-window-width -5%) break
    )

    resize-right (switch
        ((input virtual ni-meta1)) (cmd-log none error niri msg action swap-window-right) break
        () (cmd-log none error niri msg action set-window-width +5%) break
    )

    resize-up (cmd-log none error niri msg action set-window-height +5%)
    resize-down (cmd-log none error niri msg action set-window-height -5%)
)

(defalias
    ms-up (movemouse-accel-up 2 2000 1 5)
    ms-dwn (movemouse-accel-down 2 2000 1 5)
    ms-lft (movemouse-accel-left 2 2000 1 5)
    ms-rght (movemouse-accel-right 2 2000 1 5)

    scroll-up (mwheel-up 100 120)
    scroll-down (mwheel-down 100 120)
    scroll-lft (mwheel-left 100 120)
    scroll-rght (mwheel-right 100 120)
)

(deflayer niri-mouse
	_    _  _  _  _  _  _  _  _  _  _  _  _  _
	_    _  _  _  _  _  _  @scroll-down  @scroll-up  @scroll-lft  @scroll-rght  _  _  _
	_    _  _ mrgt  mlft  _  @ms-lft @ms-dwn @ms-up @ms-rght _  _  _
	_    _  _  _  _  _  _  mlft  mmid  mrgt  XX  _
	_    _   _      _    _      _    _
)

(deflayer handsdown-niri-mouse
	_    _  _  _  _  _  @scroll-down  @scroll-up  @scroll-lft  @scroll-rght  _  _  _
	_    _  _ mrgt  mlft  _ _  @ms-lft @ms-dwn @ms-up @ms-rght _  _  _
	_    _  _  _  _  _  _  mlft  mmid  mrgt  XX  _ _
	_    _  _  _  _  _  _  _  _  _  _  _  _
	_    _   _      _    _      _    _
)

;; handsdown
;; w  f  m  p  v   /  .  x  "  j  
;; r  s  n  t  b   ,  a  e  i  h
;; x  c  l  d  g   -  u  o  y  k 

;; adaptive keys
;;
;; base stuff
;; AH - AU
;; UH - UA
;; EH - EO
;; OH - OE
;; maybe
;; AE - AU
;;
;; neu specific
;; PB - PM
;; DB - DL
;; GD - GL
;; DG - DL (?)
;; TG - TN
;; MV - ML
;;
;; PM - PL
;; FM - FL
;; WM - WL
;;
;; FP - L
;; WP - LML
;; VP - VL
;; BT - BL
;; GT - GHT
;;
;; YK - YI
;;
;; punctuation:
;; ./ - .com
;; ." - .edu
;; .' - .org
;; /. - !
;; /" - ?
;; /" - ?
;;
;; combos (many aren't listed here for some shortcuts)
;; fp - qu (hold for q)
;; nt - th
;; sn - ch
;; wf - wh
;; rs - sh
;; mp - ph
;; dg - gh
;; rsn - sch
;;
;; st - z
;;
;; adaptive keys are <1> then <2>, in quick succession 
;; combos are <1> and <2>, pressed very close together
;; 

(defvar adaptive-timeout 80)
(defvar long-adaptive-timeout 120)
(defvar mod-timeout 200)
(defvar mod-cooldown 100)
(defvar shift-cooldown 40)
;; (defvar combo-timeout 35)
(defvar combo-timeout 50)

(defalias
  hd-rel (release-layer handsdown-upper)

  hd_magic_h (switch
    ((key-timing 1 gt $adaptive-timeout)) h break

    ((key-history a 1)) u break
    ((key-history u 1)) a break
    ((key-history e 1)) o break
    ((key-history o 1)) e break

    () h break
  )

  hd_magic_b (switch
    ((key-timing 1 gt $adaptive-timeout)) b break

    ((key-history p 1)) m break
    ((key-history d 1)) l break

    () b break
  )

  hd_magic_g (switch
    ((key-timing 1 gt $adaptive-timeout)) g break

    ;; ((key-history d 1)) l break
    ((key-history t 1)) n break

    () g break
  )

  hd_magic_d (switch
    ((key-timing 1 gt $adaptive-timeout)) d break

    ((key-history g 1)) l break

    () d break
  )

  hd_magic_v (switch
    ((key-timing 1 gt $adaptive-timeout)) v break

    ((key-history m 1)) l break

    () v break
  )

  hd_magic_m (switch
    ((key-timing 1 gt $adaptive-timeout)) m break

    ((key-history p 1)) l break
    ((key-history f 1)) l break
    ((key-history w 1)) l break

    () m break
  )

  hd_magic_p (switch
    ((key-timing 1 gt $adaptive-timeout)) p break

    ((key-history f 1)) (macro bspc l) break
    ((key-history w 1)) (macro bspc l m l) break
    ((key-history v 1)) l break

    () p break
  )

  hd_magic_k (switch
    ((key-timing 1 gt $adaptive-timeout)) k break

    ((key-history y 1)) i break

    () k break
  )

  hd_magic_t (switch
    ((key-timing 1 gt $long-adaptive-timeout)) t break

    ((key-history g 1)) (macro h t) break
    ((key-history b 1)) l break

    () t break
  )

  t_mod (switch
    ((key-timing 1 gt $mod-cooldown)) (tap-hold 0 $mod-timeout @hd_magic_t lctl) break
    () @hd_magic_t break
  )
  n_mod (switch
    ((key-timing 1 gt $shift-cooldown)) (tap-hold-release 0 $mod-timeout n (layer-while-held handsdown-upper)) break
    () n break
  )
  s_mod (switch
    ((key-timing 1 gt $mod-cooldown)) (tap-hold 0 $mod-timeout s lalt) break
    () s break
  )
  r_mod (switch
    ((key-timing 1 gt $mod-cooldown)) (tap-hold 0 $mod-timeout r met) break
    () r break
  )

  a_mod (switch
    ((key-timing 1 gt $mod-cooldown)) (tap-hold 0 $mod-timeout a lctl) break
    () a break
  )
  e_mod (switch
    ((key-timing 1 gt $shift-cooldown)) (tap-hold-release 0 $mod-timeout e (layer-while-held handsdown-upper)) break
    () e break
  )
  i_mod (switch
    ((key-timing 1 gt $mod-cooldown)) (tap-hold 0 $mod-timeout i lalt) break
    () i break
  )
  h_mod (switch
    ((key-timing 1 gt $mod-cooldown)) (tap-hold 0 $mod-timeout @hd_magic_h met) break
    () @hd_magic_h break
  )

  ;; shifted varients

  ts_mod (switch
    ((key-timing 1 gt $mod-cooldown)) (tap-hold 0 $mod-timeout (multi @hd-rel S-t) lctl) break
    () (multi @hd-rel S-t) break
  )
  ns_mod (switch
    ((key-timing 1 gt $shift-cooldown)) (tap-hold-release 0 $mod-timeout (multi @hd-rel S-n) lsft) break
    () (multi @hd-rel S-n) break
  )
  ss_mod (switch
    ((key-timing 1 gt $mod-cooldown)) (tap-hold 0 $mod-timeout (multi @hd-rel S-s) lalt) break
    () (multi @hd-rel S-s) break
  )
  rs_mod (switch
    ((key-timing 1 gt $mod-cooldown)) (tap-hold 0 $mod-timeout (multi @hd-rel S-r) met) break
    () (multi @hd-rel S-r) break
  )

  as_mod (switch
    ((key-timing 1 gt $mod-cooldown)) (tap-hold 0 $mod-timeout (multi @hd-rel S-a) lctl) break
    () (multi @hd-rel S-a) break
  )
  es_mod (switch
    ((key-timing 1 gt $shift-cooldown)) (tap-hold-release 0 $mod-timeout (multi @hd-rel S-e) lsft) break
    () (multi @hd-rel S-e) break
  )
  is_mod (switch
    ((key-timing 1 gt $mod-cooldown)) (tap-hold 0 $mod-timeout (multi @hd-rel S-i) lalt) break
    () (multi @hd-rel S-i) break
  )
  hs_mod (switch
    ((key-timing 1 gt $mod-cooldown)) (tap-hold 0 $mod-timeout (multi @hd-rel S-h) met) break
    () (multi @hd-rel S-h) break
  )

  tobase (multi
    (on-press release-virtualkey hd-number-toggle)
    (on-press release-virtualkey hd-symbol-toggle)
  )
  
  hd-num-toggle (on-press press-virtualkey hd-number-toggle)
  hd-sym-toggle (on-press press-virtualkey hd-symbol-toggle)

)

(defvirtualkeys
    hd-number-toggle (layer-while-held handsdown-number)
    hd-symbol-toggle (layer-while-held handsdown-symbol)
)


(deflayer handsdown
	esc  (chord hd_t w) (chord hd_t f) (chord hd_t m) (chord hd_t p) @hd_magic_v  /  .  '  S--  j ;  ]  XX
	x (chord hd_m r) (chord hd_m s)  (chord hd_m n)  (chord hd_m t) @hd_magic_b  , @a_mod @e_mod @i_mod @h_mod  ' '  ret
	@ead (chord hd_b c) (chord hd_b l)  (chord hd_b d) (chord hd_b g) - -  u  o  y  @hd_magic_k  ' rsft
	esc  1  2  (one-shot 100 (layer-while-held handsdown-extend)) (tap-dance 1000 ((one-shot 500 (layer-while-held handsdown-symbol)) @hd-sym-toggle)) 5  spc  bspc  8  9  0  bspc
	lctl met lalt   XX  ralt   menu rctrl
)

;; every alpha key here will disable this layer
;; very similar behavior is possible with virtualkeys, but is currently impossible with a homerow mod
;; due to some internal limitations
(deflayer handsdown-upper
	esc  (chord hd_ts w) (chord hd_ts f) (chord hd_ts m) (chord hd_ts p) (multi @hd-rel S-v) /  .  '  S--  S-j ;  ]  bspc
	(multi @hd-rel S-x) (chord hd_ms r) (chord hd_ms s)  (chord hd_ms n)  (chord hd_ms t) (multi @hd-rel S-b) , @as_mod @es_mod @is_mod @hs_mod  ' '  ret
	@ead (chord hd_bs c) (chord hd_bs l)  (chord hd_bs d) (chord hd_bs g) - -  (multi @hd-rel S-u)  (multi @hd-rel S-o) (multi @hd-rel S-y) (multi @hd-rel S-k)  ' rsft
	esc  1  2  3  (tap-dance 500 ((caps-word 1000) caps))  5  spc  7  8  9  0  bspc
	lctl met lalt   XX  ralt   menu rctrl
)

(deflayer handsdown-symbol
	_    '  S-, S-.  S-'  S-\  _  S-;  ]  [  S-5  _ _  _
	_    S-`  (macro S-=) - =  S-7 S-3  S-1  S-0  S-9  S-/  _  _  _
	_    .  / S-8 \  _   S-6  S-4  S-]  S-[  S-2 _  _
	_    _  _  @tobase  _  _  (tap-dance 1000 ((one-shot 500 (layer-while-held handsdown-number)) @hd-num-toggle))  ret  _  _  _  _
	_    _   _      _    _      _    _
)

(deflayer handsdown-number 
	_    _  1  2  3  _  _ .  S-=  -  _  _  _  _
	_    _  4  5  6  _  _  =  S-0  S-9  _  _  _  _
	_    7  8  9  _ _  _  S-8  /  _ _  _  _
	_    _  _  @tobase  0 _  spc  bspc  _  _  _  _
	_    _   _      _    _      _    _
)

(deflayer handsdown-extend
	_    _  _  _  _  _  _  _  _  _  _  _  _  _
	_    _  _  _  _  _  lft  down up rght  _  _  _  _
	_    _  _  _  _  _  _  _  _  _  _  _  _
	_    _  _  _  _  _  _  _  _  _  _  _
	_    _   _      _    _      _    _
)

;; (defsrc
;; 	esc  1  2  3  4  5  6  7  8  9  0  -  =  bspc
;; 	tab  q  w  e  r  t  y  u  i  o  p  [  ]  \
;; 	caps a  s  d  f  g  h  j  k  l  ;  '  ret
;; 	lsft z  x  c  v  b  n  m  ,  .  /  rsft
;; 	lctl met lalt   spc  ralt   menu rctrl
;; )

;; combos
(defchords hd_m $combo-timeout
    (r)         @r_mod
    (s)         @s_mod
    (n)         @n_mod
    (t)         @t_mod
    (r s n)     (macro s c h)
    (s n)       (macro c h)
    (n t)       (macro t h)
    (s t)       z
    (r s)       (macro s h)
)

(defchords hd_b $combo-timeout
  (c)           c 
  (l)           l 
  (c l)         (layer-while-held handsdown-niri)
  (d)           @hd_magic_d
  (g)           @hd_magic_g
  (d g)         (macro g h)
)

(defchords hd_t $combo-timeout
  (w)           w
  (f)           f
  (m)           @hd_magic_m
  (p)           @hd_magic_p 
  (f p)         (tap-hold-release-timeout 100 150 (macro q u) q q)
  (w f)         (macro w h)
  (m p)         (macro p h)
)

;; shifted versions

(defchords hd_ms $combo-timeout
    (r)         @rs_mod
    (s)         @ss_mod
    (n)         @ns_mod
    (t)         @ts_mod
    (r s n)     (multi @hd-rel (macro S-s c h))
    (s n)       (multi @hd-rel (macro S-c h))
    (n t)       (multi @hd-rel (macro S-t h))
    (s t)       (multi @hd-rel S-z)
    (r s)       (multi @hd-rel (macro S-s h))
)

(defchords hd_bs $combo-timeout
  (c)           (multi @hd-rel S-c)
  (l)           (multi @hd-rel S-l)
  (d)           (multi @hd-rel S-d)
  (g)           (multi @hd-rel S-g)
  (d g)         (multi @hd-rel (macro S-g h))
)

(defchords hd_ts $combo-timeout
  (w)           (multi @hd-rel S-w)
  (f)           (multi @hd-rel S-f)
  (m)           (multi @hd-rel S-m)
  (p)           (multi @hd-rel S-p)
  (f p)         (multi @hd-rel (tap-hold-release-timeout 100 150 (macro S-q u) S-q S-q))
  (w f)         (multi @hd-rel (macro S-w h))
  (m p)         (multi @hd-rel (macro S-p h))
)
